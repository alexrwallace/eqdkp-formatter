{"version":3,"sources":["logo.svg","compenents/Converter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Converter","props","state","value","finalText","handleChange","bind","handleFinalChange","event","this","setState","target","text","lines","split","isEmptyOrDataLine","str","length","dateEntry","adjustments","filteredAttendees","map","line","includes","replace","trim","startsWith","push","finalLine","dateString","moment","Date","format","filter","el","adjLine","adjustingLine","add","replaceArray","replacee","replaced","index","findIndex","splice","remove","join","className","data-tid","rows","cols","placeholder","onChange","onClick","handleClick","data-tclass","type","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d15cf4e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport moment from 'moment'\r\nimport './Converter.css';\r\n\r\n  export class Converter extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        value: '',\r\n        finalText:''\r\n      };\r\n  \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleFinalChange = this.handleFinalChange.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleFinalChange(event) {\r\n        this.setState({finalText: event.target.value});\r\n      }\r\n\r\n    handleClick(text) {\r\n        let lines = text.split(\"\\n\");\r\n        const isEmptyOrDataLine = (str) => { return (!str || 0 === str.length); } \r\n\r\n        let dateEntry = ''\r\n        let dateLine = '';\r\n        let startline = ''\r\n        let endline = '';\r\n        const adjustments = [];\r\n\r\n        const attendees = lines.map((line) => {\r\n            if (line.includes('---------------------------')){\r\n                dateEntry = line.replace('---------------------------', '[ANONYMOUS] ');\r\n                dateLine = line;\r\n            }\r\n            else if(line.trim().includes('Players on EverQuest:')){\r\n               return;\r\n            } \r\n            else if (line.includes('There are ')) {\r\n              return;\r\n            }\r\n            else if (line.startsWith('+') || line.startsWith('-') || line.includes('=')) {\r\n                adjustments.push(line)\r\n            }\r\n            else{\r\n                let finalLine = line.replace(/\\s*LFG\\s*/g, '').replace(/\\s*AFK\\s*/g, '').replace(/\\s*\\(.*?\\)\\s*/g, '').replace(/\\s*\\[.*?\\]\\s*/g, '').replace(/\\s*\\<.*?\\>\\s*/g, '')\r\n                if(!isEmptyOrDataLine(finalLine)){\r\n                  if(isEmptyOrDataLine(dateEntry)){\r\n                    const date = moment(new Date());\r\n                    let dateString = date.format('ddd MMM DD HH:mm:ss YYYY')\r\n                    dateEntry = `[${dateString}] [ANONYMOUS] `\r\n                  }\r\n                   return dateEntry + finalLine;\r\n                }\r\n            }\r\n        })\r\n\r\n        var filteredAttendees = attendees.filter(function (el) {\r\n            return el != null;\r\n          });\r\n\r\n        adjustments.map((adjLine) => {\r\n          const adjustingLine = adjLine.split(',')[0].trim();\r\n            if (adjustingLine.startsWith('+')) {\r\n              let add = adjustingLine.replace('+', '');\r\n              if(adjustingLine.includes('=')){\r\n                    const replaceArray = add.split('=')\r\n                    const replacee = replaceArray[0];\r\n                    const replaced = replaceArray[1].replace('(', '').split(')')[0]\r\n                    const index = filteredAttendees.findIndex((line) => line.includes(replaced));\r\n                    if(index != -1){\r\n                        filteredAttendees.splice(index, 1);\r\n                        filteredAttendees.push(dateEntry + replacee);\r\n                    }\r\n                }\r\n                else{\r\n                  const index = filteredAttendees.findIndex((line) => line.includes(add));\r\n                    if(index == -1){\r\n                        filteredAttendees.push(dateEntry + add);\r\n                    }\r\n                }\r\n            }\r\n            if (adjustingLine.startsWith('-')) {\r\n                let remove = adjustingLine.replace('-', '');\r\n                const index = filteredAttendees.findIndex((line) => line.includes(remove));\r\n                if(index != -1){\r\n                    filteredAttendees.splice(index, 1);\r\n                }\r\n                \r\n            }\r\n          })\r\n\r\n        if(dateLine === '' || startline === '' || endline === ''){\r\n            this.setState({finalText: 'invalid formatting'});\r\n        }\r\n        this.setState({finalText: filteredAttendees.join('\\n')});\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"container\"  data-tid=\"container\">\r\n        <div>\r\n          <textarea className=\"textbox\" rows={50} cols={80} value={this.state.value} placeholder={\"Insert Data here\"} onChange={this.handleChange} />\r\n        </div>\r\n        <div className=\"center\" >\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => this.handleClick(this.state.value)}\r\n            data-tclass=\"btn\"\r\n            type=\"button\"\r\n          >\r\n            <i className=\"fa fa-arrow-right\" />\r\n          </button>\r\n        </div>\r\n        <div>\r\n        <textarea className=\"textbox\" rows={50} cols={80} value={this.state.finalText} onChange={this.handleFinalChange} />\r\n        </div>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Converter } from './compenents/Converter';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>EQDKP Converter</h2>\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}